const Discord = require("discord.js"),
  moment = require("moment");

const Infraction = require("../models/Infraction.model");

module.exports = {

  /**
   * @typedef {string|Discord.User|Discord.GuildMember} discordId A user ID or instance of `Discord.User` or `Discord.GuildMember`
   * @typedef infraction
   * @property {discordId} discordId User's Discord Id
   * @property {String|Discord.Channel} channel The channel Id where the infraction took place
   * @property {String|Discord.Message} message The message Id where the infraction took place
   * @property {String|Discord.Message} flag The mod flag created for the infraction
   * @property {String} description The description of the infraction
   * @property {discordId} mod The mod's Discord Id
   * @property {String} value The point value of the infraction
   * @property {Date} timestamp Autogenerated time of infraction
   */
  /**
   * Get an infraction by its associated mod flag.
   * @param {String|Discord.Message} flag The mod flag for the infraction
   * @returns {Promise<infraction>}
   */
  getByFlag: async function(flag) {
    if (flag.id) flag = flag.id;
    return await Infraction.findOne({ flag }).exec();
  },
  /**
   * Get a summary of a user's infractions.
   * @typedef summary
   * @property {discordId} discordId The recieved user
   * @property {number} count The amount of records
   * @property {number} points The point value of the infraction
   * @property {number} time The recieved time in days
   * @property {infraction[]} detail Found infractions
   */

  /**
   * @param {discordId} discordId The user whose summary you want to view.
   * @param {Number} [time=28] The time in days to review.
   * @returns {Promise<summary>}
   */
  getSummary: async function(discordId, time = 28) {
    discordId = discordId.id ?? discordId;
    const since = moment().subtract(time, "days");
    const records = await Infraction.find({ discordId, timestamp: { $gte: since } }).exec();
    return {
      discordId,
      count: records.length,
      points: records.reduce((c, r) => c + r.value, 0),
      time,
      detail: records
    };
  },
  /**
   * Remove/delete an infraction
   * @param {String|Discord.Message} flag The infraction flag
   */
  remove: function(flag) {
    if (flag.id) flag = flag.id;
    return Infraction.findOneAndDelete({ flag }).exec();
  },
  /**
   * Save an infraction
   * @param {infraction} data Data to save
   * @returns {Promise<infraction>} The saved infraction
   */
  save: async function(data) {
    if (data.message instanceof Discord.Message) {
      data.discordId = data.discordId?.id ?? data.discordId ?? data.message.author.id;
      data.channel = data.channel?.id ?? data.channel ?? data.message.channel.id;
      data.description = data.description ?? data.message.cleanContent;
      data.message = data.message.id;
    }
    data.discordId = data.discordId.id ?? data.discordId;
    data.channel = data.channel?.id ?? data.channel;
    data.mod = data.mod.id ?? data.mod;
    data.flag = data.flag?.id ?? data.flag;
    return await new Infraction(data).save().exec();
  },
  /**
   * Update an infraction
   * @param {infraction} infraction The updated infraction
   * @returns {Promise<infraction>} The new saved infraction
   */
  update: async function(infraction) {
    return await Infraction.findByIdAndUpdate(infraction._id, infraction, { new: true }).exec();
  }
};
